// Copyright (c) 2017 Runtime Verification, Inc. All Rights Reserved.
//
// This examples showcases the dynamic contract creation feature of IELE. The
// Wallet contract can dynamically create acounts with the Forwarder contract
// deployed, since the code for the Forwarder contract is statically available.

// This contract implements a forwarder that forwards any funds sent to
// the account it is deployed with to the acoount that created it.
contract Forwarder {

  // initializes a forwarded by storing in the account storage the account
  // number of the creator, this is the account to which received funds should
  // be forwarded
  define @init() {
    %parent = call @iele.caller()
    sstore %parent, 0
  }

  // deposit forwards the recieved funds to the creator of this account
  define public @deposit() {
    // get the received funds
    %value = call @iele.callvalue()

    // get the creator account, where we should forward funds, from the storage
    %sender = sload 0

    // forward funds by calling deposit at the creator account
    %gas = call @iele.gas()
    %status = call @deposit at %sender () send %value , gaslimit %gas
    br %status, throw
    ret void

  throw:
    call @iele.invalid()
  }
}

// This contract implements a wallet that can serve deposit and withdrawal
// requests as well as setup new accounts that forward funds sent to them to
// this wallet. Only the owner can withdraw and/or setup new forwarders.
contract Wallet {
  external contract Forwarder

  // initializes a wallet account by storing the provided account address as
  // the wallet's owner
  define @init(%owner) {
    sstore %owner, 0
  }

  // deposits the sent value to the wallet account's balance
  define public @deposit() {}

  // withdraws amount equal to %value from the wallet and sends it to the
  // account address %to
  define public @withdraw(%to, %value) {
    // get the wallet's owner from storage
    %owner = sload 0

    // ensure that the caller (the withdrawer) is the wallet's owner
    %caller = call @iele.caller()
    %isnotowner = cmp ne %caller, %owner
    br %isnotowner, throw

    // withdraw the desired amount and send it to the desired account
    %gas = call @iele.gas()
    %status = call @deposit at %to () send %value , gaslimit %gas
    br %status, throw
    ret void

  throw:
    call @iele.invalid()
  }

  // creates a new account that simply forwards any funds sent to it to this
  // wallet and returns the address of the created forwarder account
  define public @newForwarder() {
    // get the wallet's owner from storage
    %owner = sload 0

    // ensure that the caller is the wallet's owner
    %caller = call @iele.caller()
    %isnotowner = cmp ne %caller, %owner
    br %isnotowner, throw

    // create a new account, deploy the Forwarder contract with it and
    // return its address
    %status, %addr = create Forwarder () send 0
    br %status, throw
    ret %addr

  throw:
    call @iele.invalid()
  }
}
