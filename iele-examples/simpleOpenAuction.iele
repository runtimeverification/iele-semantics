// Copyright (c) 2017 Runtime Verification, Inc. All Rights Reserved.
//
// This contract implements a simple open auction. When this contract is
// deployed with an account, the account is hosting an auction and can
// manage incoming bids, as well as close the auction and settle the transfer
// of funds from the final highest bidder to the auction's beneficiary.
contract SimpleOpenAuction {

// variable locations - the following account storage locations hold the
// described information:

  // account address of the beneficiary of the auction
  @beneficiary    = 0

  // timestamp of the start of the auction, bids received before that time
  // will not be accepted
  @auction.start  = 1

  // timestamp of the end of the auction, bids received after that time
  // will not be accepted
  @auction.end    = 2

  // account address of the current highest bidder
  @highest.bidder = 3

  // value of the current highest bid
  @highest.bid    = 4

  // set to 1 after the auction has been settled (the auction end time has passed and
  // the benficiary has received the final highest bid, set to 0 otherwise
  @settled        = 5

// initializes an auction with the given beneficiary and bidding time duration
define @init(%beneficiary, %bidding.time) {
  // init beneficiary
  sstore %beneficiary, @beneficiary

  // init auction start timestamp
  %auction.start = call @iele.timestamp()
  sstore %auction.start, @auction.start

  // init auction end timestamp
  %auction.end = add %auction_start, %bidding.time
  sstore %auction.end, @auction.end

  // init highest bidder, highest bid, and settled
  sstore 0, @highest.bidder
  sstore 0, @highest.bid
  sstore 0, @settled
}

// sends a bid with value equal to the value sent with the corresponding
// account call
// if the bid becomes the new highest bid returns with exit status 0, else
// reverts with exit status -1
define public @bid() {
  // check if auction is active
  %timestamp = call @iele.timestamp()
  %auction.end = sload @auction.end
  %auction.closed = cmp ge %timestamp, %auction.end
  br %auction.closed, revert.bid

  // check if incoming bid is higher than current highest bid
  %bid.value = call @iele.callvalue()
  %highest.bid = sload @highest.bid
  %low.bid = cmp le %bid.value, %highest.bid
  br %low.bid, revert.bid

  // check if we need to refund current highest bidder
  %no.refund.needed = iszero %highest.bid
  br %no.refund.needed, update.bid

refund.bid:
  // refund current highest bidder
  %highest.bidder = sload @highest.bidder
  %gas = call @iele.gas()
  %status = call @deposit at %highest.bidder() send %highest.bid, gaslimit %gas
  br %status, throw

update.bid:
  // store the new highest bidder and bid
  %new.highest.bidder = call @iele.caller()
  sstore %new.highest.bidder, @highest.bidder
  sstore %bid.value, @highest.bid

  // return with exit status 0
  ret void

revert.bid:
  // the auction was closed or incoming bid was not high enough, revert so
  // that the bidder gets their bid back
  revert -1

throw:
  call @iele.invalid()
}

// settles the auction by sending the final highest bid value to the
// beneficiary and returns the address of the final highest bidder's
// account
// if the auction is still active, reverts with exit status -1
define public @settle.auction() {
  // check if auction has been closed
  %timestamp = call @iele.timestamp()
  %auction.end = sload @auction.end
  %auction.active = cmp lt %timestamp, %auction.end
  br %auction.active, auction.active

  // check if auction has been already settled
  %already.settled = sload @settled
  br %already.settled, exit

  // send highest bid to beneficiary and settle the auction
  %highest.bid = sload @highest.bid
  %beneficiary = sload @beneficiary
  %gas = call @iele.gas()
  %status = call @deposit at %beneficiary() send %highest.bid, gaslimit %gas
  br %status, throw
  sstore 1, @settled

exit:
  // return the address of the final highest bidder's account
  %highest.bidder = sload @highest.bidder
  ret %highest.bidder

auction.active:
  // auction is still active, revert with exit status -1
  revert -1

throw:
  call @iele.invalid()
}

}
