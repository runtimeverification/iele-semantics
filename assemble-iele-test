#!/usr/bin/env python

import subprocess
import sys
import json
import tempfile

import os 
dir_path = os.path.dirname(__file__)

def assembleIele(code):
  if len(code) == 0:
    return ""
  if code[0:2] == "0x":
    return code
  if os.path.isabs(code):
    path = code
  else:
    path = source_dir + "/" + code
  binary = subprocess.check_output(["stack", "exec", "iele-assemble", path], cwd=dir_path + "/compiler")
  return binary

def convertToBinaryIele(json):
  if isinstance(json, dict):
    res = {}
    isCreateTx = False
    if "to" in json.keys():
      if json["to"] == "":
        isCreateTx = True
    for key, value in json.iteritems():
      if key == "code" or (key == "data" and isCreateTx):
        res[key] = assembleIele(value)
      else:
        res[key] = convertToBinaryIele(value)
    if "to" in json.keys() and "secretKey" in json.keys():
      from ethereum.transactions import Transaction
      data = res["data"]
      binary = data.decode("hex")
      t = Transaction(int(res["nonce"], 16), int(res["gasPrice"], 16), int(res["gasLimit"], 16), res["to"], int(res["value"], 16), binary)
      t.sign(res["secretKey"])
      del res["secretKey"]
      res["v"] = hex(t.v)
      res["r"] = format(t.r, "#066x")
      res["s"] = format(t.s, "#066x")
    return res
  elif isinstance(json, list):
    res = []
    for value in json:
      res.append(convertToBinaryIele(value))
    return res
  elif isinstance(json, unicode) or isinstance(json, bool) \
      or isinstance(json, long) or isinstance(json, int):
    return json

source_file = sys.argv[1]

source_dir = os.path.dirname(os.path.realpath(source_file))

with open(source_file, "r") as source:
    original_test = json.load(source)
    new_test = convertToBinaryIele(original_test)
    json.dump(new_test, sys.stdout, indent=4)

