#!/usr/bin/env bash

set -euo pipefail

notif() { echo "== $@" >&2 ; }
fatal() { echo "[FATAL] $@" ; exit 1 ; }

INSTALL_BIN="$(dirname $0)"
INSTALL_LIB=${INSTALL_BIN}/../lib/kiele

export PATH="$INSTALL_BIN:$INSTALL_LIB:$PATH"
export LD_LIBRARY_PATH=${LD_LIBRARY_PATH:-}:/usr/local/lib

check_k_install() {
    which kore-exec &> /dev/null \
        || fatal "Must have K installed! See https://github.com/kframework/k/releases."
    which kast &> /dev/null \
        || fatal "Must have K installed! See https://github.com/kframework/k/releases."
    which krun &> /dev/null \
        || fatal "Must have K installed! See https://github.com/kframework/k/releases."
}

# Runners
# -------

### Does not depend on K Install

run_assemble() {
    iele-assemble "$run_file" "$@"
}

run_interpret() {
    local kast output status
    kast="$(mktemp)"
    output="$(mktemp)"
    if $debug; then
        notif "kast: $kast    output: $output"
    else
        trap "rm -rf $kast $output" INT TERM EXIT
    fi
    status=0
    kore-json.py "$run_file" "$schedule" "$mode" > "$kast"
    case "$backend" in
        standalone)
            debugger=()
            ! $debug || debugger+=(gdb --args)
            "${debugger[@]}"  iele-interpreter "$kast" -1 "$output" "$@" || status="$?"
            ;;
        haskell)
            check_k_install
            kore-exec "$backend_dir/$definition-kompiled/definition.kore" --pattern "$kast" --module "$module" --output "$output" "$@" || status="$?"
            ;;
        *)
            fatal "Unknown backend: $backend"
            ;;
    esac
    if $unparse || [[ "$status" != '0' ]]; then
        kprint "$backend_dir/$definition-kompiled" "$output"
        printf "\n"
        exit "$status"
    fi
}

run_krun() {
    check_k_install
    krun --directory "$backend_dir"                        \
        -cSCHEDULE="$schedule"      -pSCHEDULE='cat' \
        "$run_file" "$@"
}

run_check() {
    if run_krun --output none "$@"; then
        echo "Contract is well-formed."
	exit 0
    else
	echo "Contract is ill-formed."
        exit 1
    fi
}

run_vm() {
    iele-vm "$kiele_port" "$kiele_host"
}

# Main
# ----

run_command="$1" ; shift

if [[ "$run_command" == 'help' ]] || [[ "$run_command" == '--help' ]] ; then
    echo "
        usage: $0 assemble                                                              <pgm> <assemble arg>*
               $0 interpret    [--backend (standalone|haskell)]            <KIELE arg>* <pgm> <interpret arg>*
               $0 krun         [--backend (standalone|haskell|node|check)] <KIELE arg>* <pgm> <K arg>*
               $0 check                                                    <KIELE arg>* <pgm> <K arg>*
               $0 vm                                                       <KIELE arg>*

               $0 [help|--help|version|--version]

           $0 assemble  : Translate IELE assembly <pgm to IELE bytecode
           $0 interpret : Run given input JSON or IELE <pgm>
           $0 krun      : Run given input <pgm> using 'krun'
           $0 check     : Run the IELE well-formedness checker on <pgm>
           $0 vm        : Run the KIELE VM server.

           $0 help    : Display this help message.
           $0 version : Display the versions of KIELE in use.

           Note: <pgm> is a path to a file containing a IELE program/test (possible in JSON format)
                 <assemble arg> is an argument to the assembler
                 <interpret arg> is an argument you want to pass to the interpreter
                 <K arg> is an argument you want to pass to K
                 <KIELE arg> is one of (--no-unparse|--debug|--host|--port|--mode|--schedule|--module|--definition)
    "
    exit 0
fi

if [[ "$run_command" == 'version' ]] || [[ "$run_command" == '--version' ]] ; then
    notif "KIELE Version"
    cat $INSTALL_LIB/version
    exit 0
fi

backend='standalone'
[[ "$run_command" != 'check' ]] || backend='check'
debug=false
unparse=true
mode='LblNORMAL{}()'
schedule='LblDEFAULT{}()'
kiele_port='8545'
kiele_host='127.0.0.1'
module='IELE-TESTING'
definition='iele-testing'
args=()
while [[ $# -gt 0 ]]; do
    arg="$1"
    case $arg in
        --backend)    backend="$2"              ; shift 2 ;;
        --debug)      debug=true                ; shift   ;;
        --no-unparse) unparse=false             ; shift   ;;
        --mode)       mode='Lbl'$2'{}()'        ; shift 2 ;;
        --module)     module="$2"               ; shift 2 ;;
        --definition) definition="$2"           ; shift 2 ;;
        --schedule)   schedule='Lbl'$2'{}()'    ; shift 2 ;;
        -p|--port)    kiele_port="$2"           ; shift 2 ;;
        -h|--host)    kiele_host="$2"           ; shift 2 ;;
        *)            args+=("$1")              ; shift   ;;
    esac
done
set -- "${args[@]}"
backend_dir="${backend_dir:-$INSTALL_LIB/$backend}"

if [[ "$run_command" != 'vm' ]]; then
    run_file="$1" ; shift
    [[ -f "$run_file" ]] || [[ "$run_file" == '-' ]] || fatal "File does not exist: $run_file"
fi

case "$run_command" in
    assemble)  run_assemble  "$@" ;;
    interpret) run_interpret "$@" ;;
    krun)      run_krun      -cMODE="$mode"              -pMODE='cat'   "$@"  ;;
    check)     run_check     "$@" ;;
    vm)        run_vm        "$@" ;;
    *) $0 help ; fatal "Unknown command: $run_command" ;;
esac
